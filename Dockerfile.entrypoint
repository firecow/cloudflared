#!/bin/sh

set -e

# function that prints info message, if TUNNEL_LOGLEVEL is debug or info
printInfo() {
  echo "${TUNNEL_LOGLEVEL}" | grep -q -E '^(debug|info)$' || return 0
  formattedDate=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
  echo "$formattedDate INF ${1}"
}

# function that prints warn message, if TUNNEL_LOGLEVEL is debug, info, warn and error
printError() {
  echo "${TUNNEL_LOGLEVEL}" | grep -q -E '^(debug|info|warn|error)$' || return 0
  formattedDate=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
  echo "$formattedDate ERR ${1}"
}

# function that prints fatal message and exits
printAndExit() {
  formattedDate=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
  echo >&2 "$formattedDate FAT ${2}"
  exit "${1}"
}

if [ "$*" != "" ]; then
  printAndExit 1 "You cannot use custom docker commands with this image '$*'"
fi

if [ -n "${TUNNEL_NAME}" ]; then
  printAndExit 1 "You cannot use TUNNEL_NAME it's derived from TUNNEL_HOSTNAME"
fi

if [ -n "${TUNNEL_FORCE_PROVISIONING_DNS}" ]; then
  printAndExit 1 "You cannot use TUNNEL_FORCE_PROVISIONING_DNS it's determined via route dns command"
fi

if [ -z "${TUNNEL_HOSTNAME}" ]; then
  printAndExit 1 "You need to specify TUNNEL_HOSTNAME"
fi

if [ -z "${TUNNEL_URL}" ] && [ -z "${TUNNEL_UNIX_SOCKET}" ]; then
  printAndExit 1 "You need to specify TUNNEL_URL or TUNNEL_UNIX_SOCKET"
fi

# Make sure TUNNEL_LOGLEVEL is valid
echo "${TUNNEL_LOGLEVEL}" | grep -q -E '^(debug|info|warn|error|fatal)$' || printAndExit $? "TUNNEL_LOGLEVEL must be debug|info|warn|error|fatal"

# Prevent message about missing config file.
if [ ! -f /etc/cloudflared/config.yml ]; then
  printInfo "/etc/cloudflared/config.yml not found autogenerating one"
  echo "---" >/etc/cloudflared/config.yml
fi

export TUNNEL_FORCE_PROVISIONING_DNS='false'
derived_tunnel_name=$(echo "${TUNNEL_HOSTNAME}" | sed "s,^.*://,,g" | tr '[:upper:]' '[:lower:]')
export TUNNEL_NAME="${TUNNEL_NAME:-${derived_tunnel_name}}"

# Check for active connections and/or cleanup pending connections
tunnel_info=$(cloudflared --loglevel error tunnel info --output json "${TUNNEL_NAME}")
is_active=$(echo "${tunnel_info}" | jq '.conns[] | .conns[] | select(.is_pending_reconnect == false) | length' | wc -l)
if [ "$is_active" != "0" ]; then
  printAndExit 1 "Active tunnels for '${TUNNEL_NAME}' found, shutting down"
fi
is_pending=$(echo "${tunnel_info}" | jq '.conns[] | .conns[] | select(.is_pending_reconnect == true) | length' | wc -l)
if [ "$is_pending" != "0" ]; then
  printError "Cleaning pending connections for '${TUNNEL_NAME}'"
  cloudflared --loglevel 'error' tunnel cleanup "${TUNNEL_NAME}"
fi

existing_tunnels_json=$(cloudflared --loglevel 'error' tunnel list --name "${TUNNEL_NAME}" --output json)
if [ "${existing_tunnels_json}" != "[]" ]; then
  printInfo "Deleting existing named tunnel '${TUNNEL_NAME}'"
  cloudflared --loglevel 'error' tunnel delete "${TUNNEL_NAME}"
else
  printInfo "No existing named tunnel found"
fi

printInfo "Creating new named tunnel '${TUNNEL_NAME}'"
cloudflared --loglevel 'error' tunnel create "${TUNNEL_NAME}" 1>/dev/null

printInfo "Routing dns from '${TUNNEL_NAME}' to tunnel"
cloudflared --loglevel 'error' tunnel route dns --overwrite-dns "${TUNNEL_NAME}" "${derived_tunnel_name}"

unset TUNNEL_HOSTNAME

exec "cloudflared" "tunnel"
